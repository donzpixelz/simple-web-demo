name: Deploy static app to EC2 (push-only app/ with no-cache)

on:
  push:
    branches: ["main"]

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      EC2_KEY_NAME: simple-web-demo-key
      WEB_ROOT: /opt/simple-web-demo/app
      CONF_DIR: /opt/simple-web-demo/nginx/conf.d
      CONTAINER: simple-web-demo
      PORT: "8080"

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            app:
              - 'app/**'
            conf:
              - 'nginx/default.conf'
            workflow:
              - '.github/workflows/deploy.yml'

      - name: Stop early if nothing relevant changed
        if: steps.changes.outputs.app != 'true' && steps.changes.outputs.conf != 'true' && steps.changes.outputs.workflow != 'true'
        run: |
          echo "No app/ or nginx conf changes; skipping deploy."
          exit 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find EC2 host & SGs
        id: ec2
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(aws ec2 describe-instances \
            --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicDnsName" --output text)
          if [[ -z "$HOST" || "$HOST" == "None" ]]; then
            echo "No running instance found with key-name=${EC2_KEY_NAME} in ${AWS_REGION}"
            exit 1
          fi
          SG_IDS=$(aws ec2 describe-instances \
            --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].SecurityGroups[].GroupId" --output text)
          echo "host=$HOST" >> "$GITHUB_OUTPUT"
          echo "sg_ids=$SG_IDS" >> "$GITHUB_OUTPUT"

      - name: Authorize runner IP for SSH (temp)
        id: sshopen
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com | tr -d '\n')
          for SG in ${{ steps.ec2.outputs.sg_ids }}; do
            aws ec2 authorize-security-group-ingress \
              --group-id "$SG" \
              --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]" \
              || true
          done
          echo "runner_ip=$RUNNER_IP" >> "$GITHUB_OUTPUT"

      - name: Prep server (docker + nginx with bind-mounts)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            WEB_ROOT="${{ env.WEB_ROOT }}"
            CONF_DIR="${{ env.CONF_DIR }}"
            CONTAINER="${{ env.CONTAINER }}"
            PORT="${{ env.PORT }}"

            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo systemctl enable --now docker
            fi

            sudo mkdir -p "${WEB_ROOT}"
            sudo mkdir -p "${CONF_DIR}"
            sudo chown -R "$USER:$USER" /opt/simple-web-demo

            recreate=no
            if sudo docker ps -a --format '{{.Names}}' | grep -qx "${CONTAINER}"; then
              HTML_SRC=$(sudo docker inspect -f '{{range .Mounts}}{{if eq .Destination "/usr/share/nginx/html"}}{{.Source}}{{end}}{{end}}' "${CONTAINER}" || true)
              CONF_SRC=$(sudo docker inspect -f '{{range .Mounts}}{{if eq .Destination "/etc/nginx/conf.d"}}{{.Source}}{{end}}{{end}}' "${CONTAINER}" || true)
              if [ "${HTML_SRC}" != "${WEB_ROOT}" ] || [ "${CONF_SRC}" != "${CONF_DIR}" ]; then
                recreate=yes
              fi
            else
              recreate=yes
            fi

            if [ "$recreate" = "yes" ]; then
              sudo docker rm -f "${CONTAINER}" >/dev/null 2>&1 || true
              sudo docker run -d --name "${CONTAINER}" \
                -p ${PORT}:80 \
                -v "${WEB_ROOT}":/usr/share/nginx/html:ro \
                -v "${CONF_DIR}":/etc/nginx/conf.d:ro \
                --restart unless-stopped \
                nginx:alpine
            else
              sudo docker start "${CONTAINER}" >/dev/null 2>&1 || true
            fi

      # Ensure default.conf is not a directory; then upload the file
      - name: Fix conf path and upload nginx/default.conf
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            CONF_DIR="${{ env.CONF_DIR }}"
            # If someone accidentally created a directory at default.conf, remove it
            if [ -d "${CONF_DIR}/default.conf" ]; then
              sudo rm -rf "${CONF_DIR}/default.conf"
            fi
            sudo mkdir -p "${CONF_DIR}"
            sudo chown -R "$USER:$USER" "${CONF_DIR}"

      - name: Upload nginx/default.conf (as file)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "nginx/default.conf"
          target: "${{ env.CONF_DIR }}/"   # copy into the directory (keeps filename)

      - name: Upload app/ to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "app/**"
          target: "${{ env.WEB_ROOT }}/"
          strip_components: 1

      - name: Reload nginx and show served files
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            CONTAINER="${{ env.CONTAINER }}"
            sudo docker exec "${CONTAINER}" nginx -t
            sudo docker exec "${CONTAINER}" nginx -s reload || true
            echo "--- Served files ---"
            sudo docker exec "${CONTAINER}" sh -lc 'ls -la /usr/share/nginx/html | sed -n "1,200p"'

      - name: Revoke runner IP for SSH (cleanup)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP="${{ steps.sshopen.outputs.runner_ip }}"
          if [[ -n "$RUNNER_IP" ]]; then
            for SG in ${{ steps.ec2.outputs.sg_ids }}; do
              aws ec2 revoke-security-group-ingress \
                --group-id "$SG" \
                --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]" \
                || true
            done
          fi

      - name: Smoke test
        env:
          HOST: ${{ steps.ec2.outputs.host }}
          PORT: ${{ env.PORT }}
        run: |
          curl -fsS --max-time 10 "http://${HOST}:${PORT}/?nocache=$(date +%s)" >/dev/null
