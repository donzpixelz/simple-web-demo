name: Deploy static app to EC2 (push-only app/)

on:
  push:
    branches: ["main"]

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2                 # your region
      EC2_KEY_NAME: simple-web-demo-key     # your EC2 key pair name
      WEB_ROOT: /opt/simple-web-demo/app    # where files live on server
      CONTAINER: simple-web-demo            # nginx container name
      PORT: "8080"                          # public port

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Only run when app/** (or this workflow) changed
      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            app:
              - 'app/**'
            workflow:
              - '.github/workflows/deploy.yml'

      - name: Stop early if no app changes
        if: steps.changes.outputs.app != 'true' && steps.changes.outputs.workflow != 'true'
        run: |
          echo "No app/ changes; skipping deploy."
          exit 0

      # AWS creds to find instance & edit SG temporarily
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find EC2 host & SGs
        id: ec2
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(aws ec2 describe-instances \
            --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicDnsName" --output text)
          if [[ -z "$HOST" || "$HOST" == "None" ]]; then
            echo "No running instance found with key-name=${EC2_KEY_NAME} in ${AWS_REGION}"
            exit 1
          fi
          SG_IDS=$(aws ec2 describe-instances \
            --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].SecurityGroups[].GroupId" --output text)
          echo "host=$HOST" >> "$GITHUB_OUTPUT"
          echo "sg_ids=$SG_IDS" >> "$GITHUB_OUTPUT"

      # Temporarily allow this GitHub runner to SSH (port 22)
      - name: Authorize runner IP for SSH (temp)
        id: sshopen
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP=$(curl -s https://checkip.amazonaws.com | tr -d '\n')
          echo "Runner IP: $RUNNER_IP"
          for SG in ${{ steps.ec2.outputs.sg_ids }}; do
            aws ec2 authorize-security-group-ingress \
              --group-id "$SG" \
              --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]" \
              || true
          done
          echo "runner_ip=$RUNNER_IP" >> "$GITHUB_OUTPUT"

      # One-time prep on server: ensure docker + recreate container WITH bind-mount if needed
      - name: Prep server (docker + correct nginx bind-mount)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            WEB_ROOT="${{ env.WEB_ROOT }}"
            CONTAINER="${{ env.CONTAINER }}"
            PORT="${{ env.PORT }}"

            # Install docker if missing
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo systemctl enable --now docker
            fi

            # Ensure target directory exists and is writable by ec2-user
            sudo mkdir -p "${WEB_ROOT}"
            sudo chown -R "$USER:$USER" "$(dirname "${WEB_ROOT}")"

            # If container exists, check its mount; recreate if wrong
            if sudo docker ps -a --format '{{.Names}}' | grep -qx "${CONTAINER}"; then
              MOUNT_SRC=$(sudo docker inspect -f '{{range .Mounts}}{{if eq .Destination "/usr/share/nginx/html"}}{{.Source}}{{end}}{{end}}' "${CONTAINER}" || true)
              if [ "${MOUNT_SRC}" != "${WEB_ROOT}" ]; then
                echo "Recreating ${CONTAINER} with correct bind-mount..."
                sudo docker rm -f "${CONTAINER}" || true
                sudo docker run -d --name "${CONTAINER}" \
                  -p ${PORT}:80 \
                  -v "${WEB_ROOT}":/usr/share/nginx/html:ro \
                  --restart unless-stopped \
                  nginx:alpine
              else
                sudo docker start "${CONTAINER}" >/dev/null 2>&1 || true
              fi
            else
              # Start nginx container with correct bind mount
              sudo docker run -d --name "${CONTAINER}" \
                -p ${PORT}:80 \
                -v "${WEB_ROOT}":/usr/share/nginx/html:ro \
                --restart unless-stopped \
                nginx:alpine
            fi

      # Copy ONLY the app/ contents (not the 'app' folder itself) into WEB_ROOT
      - name: Upload app/ to server (flatten one level)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          source: "app/**"
          target: "${{ env.WEB_ROOT }}/"
          strip_components: 1

      # List files being served + force nginx to re-open files (reload)
      - name: Reload nginx and show served files
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            CONTAINER="${{ env.CONTAINER }}"
            sudo docker exec "${CONTAINER}" sh -lc 'ls -la /usr/share/nginx/html | sed -n "1,200p"'
            sudo docker exec "${CONTAINER}" nginx -s reload || true

      # Remove the temporary SSH ingress
      - name: Revoke runner IP for SSH (cleanup)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          RUNNER_IP="${{ steps.sshopen.outputs.runner_ip }}"
          if [[ -n "$RUNNER_IP" ]]; then
            for SG in ${{ steps.ec2.outputs.sg_ids }}; do
              aws ec2 revoke-security-group-ingress \
                --group-id "$SG" \
                --ip-permissions "IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges=[{CidrIp=${RUNNER_IP}/32,Description=gha-temp}]" \
                || true
            done
          fi

      # Quick smoke test with cache-bust
      - name: Smoke test
        env:
          HOST: ${{ steps.ec2.outputs.host }}
          PORT: ${{ env.PORT }}
        run: |
          curl -fsS --max-time 10 "http://${HOST}:${PORT}/?nocache=$(date +%s)" >/dev/null
