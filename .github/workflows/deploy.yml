name: Build and Deploy Demo

on:
  push:
    branches: ["main"]

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/simple-web-demo
      AWS_REGION: us-east-2              # your region
      EC2_KEY_NAME: simple-web-demo-key  # your EC2 key pair name

    steps:
      - name: Checkout code (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          provenance: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve -input=false \
            -var 'ssh_key_name=simple-web-demo-key' \
            -var "dockerhub_username=${{ secrets.DOCKERHUB_USERNAME }}" \
            -var "docker_image=${{ env.IMAGE_NAME }}:latest"

      # --- Discover current EC2 host dynamically in us-east-2 ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find EC2 public DNS by key name
        id: ec2
        shell: bash
        run: |
          set -euo pipefail
          HOST=$(aws ec2 describe-instances \
            --filters "Name=key-name,Values=${EC2_KEY_NAME}" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PublicDnsName" --output text)
          if [[ -z "$HOST" || "$HOST" == "None" ]]; then
            echo "No running instance found with key-name=${EC2_KEY_NAME} in region ${AWS_REGION}"
            exit 1
          fi
          echo "host=$HOST" >> "$GITHUB_OUTPUT"

      - name: Deploy via SSH (build/pull + restart)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.ec2.outputs.host }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            COMPOSE_DIR=/opt/simple-web-demo
            SERVICE_NAME=web

            sudo mkdir -p "${COMPOSE_DIR}"
            sudo chown -R "$USER:$USER" "${COMPOSE_DIR}"
            cd "${COMPOSE_DIR}"

            if [ ! -d .git ]; then
              git clone --depth=1 https://github.com/donzpixelz/simple-web-demo .
            else
              git fetch --depth=1 origin main
              git reset --hard origin/main
            fi

            # Works for either 'image:' or 'build:' in docker-compose.yml
            docker compose pull "${SERVICE_NAME}" || true
            docker compose build "${SERVICE_NAME}" || true
            docker compose up -d --no-deps "${SERVICE_NAME}"
            docker image prune -f >/dev/null 2>&1 || true

      - name: Smoke test
        env:
          HOST: ${{ steps.ec2.outputs.host }}
        run: |
          curl -fsS --max-time 10 "http://${HOST}:8080/" >/dev/null
